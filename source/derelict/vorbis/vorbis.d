/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.vorbis.vorbis;

private {
    import core.stdc.config;
    import derelict.util.loader;
    import derelict.util.system;
    import derelict.ogg.ogg;

    static if( Derelict_OS_Windows )
        enum libNames = "vorbis.dll, libvorbis-0.dll, libvorbis.dll";
    else static if( Derelict_OS_Mac )
        enum libNames = "libvorbis.dylib, libvorbis.0.dylib";
    else static if( Derelict_OS_Posix )
        enum libNames = "libvorbis.so, libvorbis.so.0, libvorbis.so.0.3.0";
    else
        static assert( 0, "Need to implement libvorbis libnames for this operating system." );
}

enum {
    OV_FALSE      = -1,
    OV_EOF        = -2,
    OV_HOLE       = -3,
    OV_EREAD      = -128,
    OV_EFAULT     = -129,
    OV_EIMPL      = -130,
    OV_EINVAL     = -131,
    OV_ENOTVORBIS = -132,
    OV_EBADHEADER = -133,
    OV_EVERSION   = -134,
    OV_ENOTAUDIO  = -135,
    OV_EBADPACKET = -136,
    OV_EBADLINK   = -137,
    OV_ENOSEEK    = -138,
}

struct vorbis_info {
    int _version; // Renamed from "version", since that's a keyword in D
    int channels;
    int rate;
    c_long bitrate_upper;
    c_long bitrate_nominal;
    c_long bitrate_lower;
    c_long bitrate_window;

    void *codec_setup;
}

struct vorbis_dsp_state {
    int analysisp;
    vorbis_info* vi;
    float** pcm;
    float** pcmret;
    int pcm_storage;
    int pcm_current;
    int pcm_returned;
    int preextrapolate;
    int eofflag;
    c_long lW;
    c_long W;
    c_long nW;
    c_long centerW;
    ogg_int64_t granulepos;
    ogg_int64_t sequence;
    ogg_int64_t glue_bits;
    ogg_int64_t time_bits;
    ogg_int64_t floor_bits;
    ogg_int64_t res_bits;
    void* backend_state;
}


struct vorbis_block {
    float** pcm;
    oggpack_buffer opb;
    c_long lW;
    c_long W;
    c_long nW;
    int pcmend;
    int mode;
    int eofflag;
    ogg_int64_t granulepos;
    ogg_int64_t sequence;
    vorbis_dsp_state* vd;
    void* localstore;
    c_long localtop;
    c_long localalloc;
    c_long totaluse;
    alloc_chain* reap;
    c_long glue_bits;
    c_long time_bits;
    c_long floor_bits;
    c_long res_bits;
    void* internal;
}

struct alloc_chain {
    void* ptr;
    alloc_chain* next;
}

struct vorbis_comment {
    char** user_comments;
    int* comment_lengths;
    int comments;
    char* vendor;
}

extern( C ) nothrow @nogc {
    alias da_vorbis_info_init = void function( vorbis_info* );
    alias da_vorbis_info_clear = void function( vorbis_info* );
    alias da_vorbis_info_blocksize = int function( vorbis_info*,int );
    alias da_vorbis_comment_init = void function( vorbis_comment* );
    alias da_vorbis_comment_add = void function( vorbis_comment*, byte*t );
    alias da_vorbis_comment_add_tag = void function( vorbis_comment*, byte*, byte* );
    alias da_vorbis_comment_query = byte* function( vorbis_comment*, byte*, int );
    alias da_vorbis_comment_query_count = int function( vorbis_comment*, byte* );
    alias da_vorbis_comment_clear = void function( vorbis_comment* );
    alias da_vorbis_block_init = int function( vorbis_dsp_state*, vorbis_block* );
    alias da_vorbis_block_clear = int function( vorbis_block* );
    alias da_vorbis_dsp_clear = void function( vorbis_dsp_state* );
    alias da_vorbis_granule_time = double function( vorbis_dsp_state*, ogg_int64_t );
    alias da_vorbis_version_string = const( char )* function();
    alias da_vorbis_analysis_init = int function( vorbis_dsp_state*,vorbis_info* );
    alias da_vorbis_commentheader_out = int function( vorbis_comment*, ogg_packet* );
    alias da_vorbis_analysis_headerout = int function( vorbis_dsp_state*, vorbis_comment*, ogg_packet*, ogg_packet*, ogg_packet* );
    alias da_vorbis_analysis_buffer = float** function( vorbis_dsp_state*, int );
    alias da_vorbis_analysis_wrote = int function( vorbis_dsp_state*, int );
    alias da_vorbis_analysis_blockout = int function( vorbis_dsp_state*,vorbis_block* );
    alias da_vorbis_analysis = int function( vorbis_block*,ogg_packet* );
    alias da_vorbis_bitrate_addblock = int function( vorbis_block* );
    alias da_vorbis_bitrate_flushpacket = int function( vorbis_dsp_state*, ogg_packet* );
    alias da_vorbis_synthesis_idheader = int function( ogg_packet* );
    alias da_vorbis_synthesis_headerin = int function( vorbis_info*, vorbis_comment*, ogg_packet* );
    alias da_vorbis_synthesis_init = int function( vorbis_dsp_state*, vorbis_info* );
    alias da_vorbis_synthesis_restart = int function( vorbis_dsp_state* );
    alias da_vorbis_synthesis = int function( vorbis_block*, ogg_packet* );
    alias da_vorbis_synthesis_trackonly = int function( vorbis_block*, ogg_packet* );
    alias da_vorbis_synthesis_blockin = int function( vorbis_dsp_state*,vorbis_block* );
    alias da_vorbis_synthesis_pcmout = int function( vorbis_dsp_state*, float*** );
    alias da_vorbis_synthesis_lapout = int function( vorbis_dsp_state*, float*** );
    alias da_vorbis_synthesis_read = int function( vorbis_dsp_state*, int );
    alias da_vorbis_packet_blocksize = c_long function( vorbis_info*,ogg_packet* );
    alias da_vorbis_synthesis_halfrate = int function( vorbis_info*, int );
    alias da_vorbis_synthesis_halfrate_p = int function( vorbis_info* );
}

__gshared {
    da_vorbis_info_init vorbis_info_init;
    da_vorbis_info_clear vorbis_info_clear;
    da_vorbis_info_blocksize vorbis_info_blocksize;
    da_vorbis_comment_init vorbis_comment_init;
    da_vorbis_comment_add vorbis_comment_add;
    da_vorbis_comment_add_tag vorbis_comment_add_tag;
    da_vorbis_comment_query vorbis_comment_query;
    da_vorbis_comment_query_count vorbis_comment_query_count;
    da_vorbis_comment_clear vorbis_comment_clear;
    da_vorbis_block_init vorbis_block_init;
    da_vorbis_block_clear vorbis_block_clear;
    da_vorbis_dsp_clear vorbis_dsp_clear;
    da_vorbis_granule_time vorbis_granule_time;
    da_vorbis_version_string vorbis_version_string;
    da_vorbis_analysis_init vorbis_analysis_init;
    da_vorbis_commentheader_out vorbis_commentheader_out;
    da_vorbis_analysis_headerout vorbis_analysis_headerout;
    da_vorbis_analysis_buffer vorbis_analysis_buffer;
    da_vorbis_analysis_wrote vorbis_analysis_wrote;
    da_vorbis_analysis_blockout vorbis_analysis_blockout;
    da_vorbis_analysis vorbis_analysis;
    da_vorbis_bitrate_addblock vorbis_bitrate_addblock;
    da_vorbis_bitrate_flushpacket vorbis_bitrate_flushpacket;
    da_vorbis_synthesis_idheader vorbis_synthesis_idheader;
    da_vorbis_synthesis_headerin vorbis_synthesis_headerin;
    da_vorbis_synthesis_init vorbis_synthesis_init;
    da_vorbis_synthesis_restart vorbis_synthesis_restart;
    da_vorbis_synthesis vorbis_synthesis;
    da_vorbis_synthesis_trackonly vorbis_synthesis_trackonly;
    da_vorbis_synthesis_blockin vorbis_synthesis_blockin;
    da_vorbis_synthesis_pcmout vorbis_synthesis_pcmout;
    da_vorbis_synthesis_lapout vorbis_synthesis_lapout;
    da_vorbis_synthesis_read vorbis_synthesis_read;
    da_vorbis_packet_blocksize vorbis_packet_blocksize;
    da_vorbis_synthesis_halfrate vorbis_synthesis_halfrate;
    da_vorbis_synthesis_halfrate_p vorbis_synthesis_halfrate_p;
}

class DerelictVorbisLoader : SharedLibLoader {
    public this() {
        super( libNames );
    }

    protected override void loadSymbols() {
        bindFunc( cast( void** )&vorbis_info_init, "vorbis_info_init" );
        bindFunc( cast( void** )&vorbis_info_clear, "vorbis_info_clear" );
        bindFunc( cast( void** )&vorbis_info_blocksize, "vorbis_info_blocksize" );
        bindFunc( cast( void** )&vorbis_comment_init, "vorbis_comment_init" );
        bindFunc( cast( void** )&vorbis_comment_add, "vorbis_comment_add" );
        bindFunc( cast( void** )&vorbis_comment_add_tag, "vorbis_comment_add_tag" );
        bindFunc( cast( void** )&vorbis_comment_query, "vorbis_comment_query" );
        bindFunc( cast( void** )&vorbis_comment_query_count, "vorbis_comment_query_count" );
        bindFunc( cast( void** )&vorbis_comment_clear, "vorbis_comment_clear" );
        bindFunc( cast( void** )&vorbis_block_init, "vorbis_block_init" );
        bindFunc( cast( void** )&vorbis_block_clear, "vorbis_block_clear" );
        bindFunc( cast( void** )&vorbis_dsp_clear, "vorbis_dsp_clear" );
        bindFunc( cast( void** )&vorbis_granule_time, "vorbis_granule_time" );
        bindFunc( cast( void** )&vorbis_version_string, "vorbis_version_string" );

        bindFunc( cast( void** )&vorbis_analysis_init, "vorbis_analysis_init" );
        bindFunc( cast( void** )&vorbis_commentheader_out, "vorbis_commentheader_out" );
        bindFunc( cast( void** )&vorbis_analysis_headerout, "vorbis_analysis_headerout" );

        bindFunc( cast( void** )&vorbis_analysis_buffer, "vorbis_analysis_buffer" );
        bindFunc( cast( void** )&vorbis_analysis_wrote, "vorbis_analysis_wrote" );
        bindFunc( cast( void** )&vorbis_analysis_blockout, "vorbis_analysis_blockout" );
        bindFunc( cast( void** )&vorbis_analysis, "vorbis_analysis" );

        bindFunc( cast( void** )&vorbis_bitrate_addblock, "vorbis_bitrate_addblock" );
        bindFunc( cast( void** )&vorbis_bitrate_flushpacket, "vorbis_bitrate_flushpacket" );

        bindFunc( cast( void** )&vorbis_synthesis_headerin, "vorbis_synthesis_idheader" );
        bindFunc( cast( void** )&vorbis_synthesis_headerin, "vorbis_synthesis_headerin" );
        bindFunc( cast( void** )&vorbis_synthesis_init, "vorbis_synthesis_init" );
        bindFunc( cast( void** )&vorbis_synthesis_restart, "vorbis_synthesis_restart" );
        bindFunc( cast( void** )&vorbis_synthesis, "vorbis_synthesis" );
        bindFunc( cast( void** )&vorbis_synthesis_trackonly, "vorbis_synthesis_trackonly" );
        bindFunc( cast( void** )&vorbis_synthesis_blockin, "vorbis_synthesis_blockin" );
        bindFunc( cast( void** )&vorbis_synthesis_pcmout, "vorbis_synthesis_pcmout" );
        bindFunc( cast( void** )&vorbis_synthesis_lapout, "vorbis_synthesis_lapout" );
        bindFunc( cast( void** )&vorbis_synthesis_read, "vorbis_synthesis_read" );
        bindFunc( cast( void** )&vorbis_packet_blocksize, "vorbis_packet_blocksize" );
        bindFunc( cast( void** )&vorbis_synthesis_halfrate, "vorbis_synthesis_halfrate" );
        bindFunc( cast( void** )&vorbis_synthesis_halfrate_p, "vorbis_synthesis_halfrate_p" );
    }
}

__gshared DerelictVorbisLoader DerelictVorbis;

shared static this() {
    DerelictVorbis = new DerelictVorbisLoader();
}